console.log("Hello yoooo");
var /* function add(a: number, b: number) {
    return a + b;
}

const sum = add(2, 3);

//Ejemplos
let muted : boolean = true;
muted = false;

//Numeros
let age = 6;
let numerador: number = 42;
let denominador: number = age;
let resultado = numerador / denominador;

//String
let nombre: string = 'Richard';
let saludo = `Me llamo &{nombre}`;

//Arreglos
let people: string [] = [];
people = ['Isabel', 'Nicole', 'Raul'];

let peolpeAndNumbers: Array< string | number > = []
peolpeAndNumbers.push("Sebas");
peolpeAndNumbers.push(21);

//Enum
enum Color {
    Rojo = "Rojo",

    Verde = "Verde",

    Azul = "Azul",

    Amarillo = "Amarillo",
}

let colorFavorito: Color = Color.Amarillo;
console.log(`MI color favorito es ${colorFavorito}`);

//Any
let comodin: any = 'Joker';
comodin = {type: 'wildcard'}; */ /* boolean. Valor verdadero o falso.
number. Números.
string. Cadenas de texto.
string[]. Arreglo del tipo cadena de texto.
Array. Arreglo multi-tipo, acepta cadenas de texto o números.
enum. Es un tipo especial llamado enumeración.
any. Cualquier tipo.
object. Del tipo objeto. */ //Funciones
/* function add(a: number, b: number): number {
    return a + b;
}

const sum = add(4, 6);

function createAdder(a: number): (number) => number {
    return function(b: number) {
        return b + a;
    }
}

const addFour = createAdder(4);
const fourPlus6 = addFour(6);

//////////
function fullName(firstName: string, lastName: string): string {
    return `${firstName} ${lastName}`;
}

fullName("Sebastian", "Moreno");
 */ //Interfaces
Color;
(function(Color1) {
    Color1["Rojo"] = "Rojo";
    Color1["Verde"] = "Verde";
})(Color || (Color = {
}));
let rect = {
    ancho: 4,
    alto: 6,
    color: Color.Rojo
};
function area(r) {
    return r.alto * r.ancho;
}
const areaRect = area(rect);
console.log(areaRect);
rect.toString = function() {
    return this.color ? `Un rectangulo ${this.color}` : `Un rectangulo`;
};
console.log(rect.toString());
